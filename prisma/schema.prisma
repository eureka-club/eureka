generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["microsoftSqlServer"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


// Next-auth models (https://next-auth.js.org/schemas/adapters#prisma-schema)

model User {
  id             Int        @id @default(autoincrement())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?  @map(name: "email_verified")
  image          String?
  roles          String     @default("member")
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @updatedAt @map(name: "updated_at")

  accounts       Account[]
  sessions       Session[]

  cycles         Cycle[]    @relation("CreatedBy")
  joinedCycles   Cycle[]    @relation("CycleToParticipant")
  likedCycles    Cycle[]    @relation("CycleToLikes")
  favCycles      Cycle[]    @relation("CycleToFavs")
  likedWorks     Work[]     @relation("WorkToLikes")
  favWorks       Work[]     @relation("WorkToFavs")
  likedPosts     Post[]     @relation("PostToLikes")
  favPosts       Post[]     @relation("PostToFavs")
  posts          Post[]  
  taxonomies     Taxonomy[]  
  terms          Term[]  

  @@map(name: "users")
}

model Account {
  id                  Int        @id @default(autoincrement())
  user                User       @relation(fields: [userId], references: [id])
  userId              Int        @map(name: "user_id")
  compoundId          String     @unique @map(name: "compound_id")
  providerType        String     @map(name: "provider_type")
  providerId          String     @map(name: "provider_id")
  providerAccountId   String     @map(name: "provider_account_id")
  refreshToken        String?    @map(name: "refresh_token")
  accessToken         String?    @map(name: "access_token")
  accessTokenExpires  DateTime?  @map(name: "access_token_expires")
  createdAt           DateTime   @default(now()) @map(name: "created_at")
  updatedAt           DateTime   @updatedAt @map(name: "updated_at")

  @@index([userId], name: "accounts_user_id_index")
  @@index([providerId], name: "accounts_provider_id_index")
  @@index([providerAccountId], name: "accounts_provider_account_id_index")

  @@map(name: "accounts")
}

model Session {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @map(name: "user_id")
  expires       DateTime
  sessionToken  String    @unique @map(name: "session_token")
  accessToken   String    @unique @map(name: "access_token")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@index([userId], name: "sessions_user_id_index")

  @@map(name: "sessions")
}

model VerificationRequest {
  id          Int       @id @default(autoincrement())
  identifier  String
  token       String    @unique
  expires     DateTime
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "verification_requests")
}


// App models

model LocalImage {
  id                Int       @default(autoincrement()) @id
  originalFilename  String    @map(name: "original_filename")
  storedFile        String    @map(name: "stored_file")
  mimeType          String    @map(name: "mime_type")
  contentHash       String    @map(name: "content_hash")
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")

  cycles  Cycle[]
  posts   Post[]
  works   Work[]

  @@index([contentHash], name: "local_images_content_hash_index")

  @@map(name: "local_images")
}

model Work {
  id               Int       @default(autoincrement()) @id
  creatorId        Int       @map(name: "creator_id") @default(1)
  type             String
  title            String
  contentText      String?    @db.VarChar(4000) @map(name: "content_text")
  author           String
  authorGender     String?    @map(name: "author_gender")
  authorRace       String?    @map(name: "author_race")
  link             String?
  publicationYear  DateTime?  @map(name: "publication_year")
  countryOfOrigin  String?    @map(name: "country_of_origin")
  length           String?
  createdAt        DateTime   @default(now()) @map(name: "created_at")
  updatedAt        DateTime   @updatedAt @map(name: "updated_at")

  localImages  LocalImage[]
  cycles       Cycle[]
  posts        Post[]
  likes        User[]    @relation("WorkToLikes")
  favs         User[]    @relation("WorkToFavs")
  tags         String?

  terms        Term[]    @relation("TaxonomyTermWork")
  
  @@index([title], name: "works_title_index")
  @@index([author], name: "works_author_index")
  @@index([creatorId], name: "works_creator_id_index")

  @@map(name: "works")
}

model CycleComplementaryMaterial {
  id                Int       @default(autoincrement()) @id
  cycle             Cycle     @relation(fields: [cycleId], references: [id])
  cycleId           Int       @map(name: "cycle_id")
  title             String
  author            String
  publicationDate   DateTime  @map(name: "publication_name")
  link              String?

  originalFilename  String?   @map(name: "original_filename")
  storedFile        String?   @map(name: "stored_file")
  mimeType          String?   @map(name: "mime_type")
  contentHash       String?   @map(name: "content_hash")

  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")

  @@index([cycleId], name: "cycle_complementary_materials_cycle_id_index")

  @@map(name: "cycle_complementary_materials")
}

model Cycle {
  id           Int       @default(autoincrement()) @id
  creator      User      @relation(name:"CreatedBy", fields: [creatorId], references: [id])
  creatorId    Int       @map(name: "creator_id")
  isPublic     Boolean   @map(name: "is_public")
  title        String
  languages    String
  contentText  String?   @db.VarChar(4000)  @map(name: "content_text")
  startDate    DateTime  @map(name: "start_date")
  endDate      DateTime  @map(name: "end_date")
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  localImages             LocalImage[]
  complementaryMaterials  CycleComplementaryMaterial[]
  participants            User[]  @relation("CycleToParticipant")
  likes                   User[]  @relation("CycleToLikes")
  favs                    User[]  @relation("CycleToFavs")
  posts                   Post[]
  works                   Work[]  
  tags                    String?

  terms        Term[]    @relation("TaxonomyTermCycle")

  @@index([creatorId], name: "cycles_creator_id_index")
  @@index([title], name: "cycles_title_index")

  @@map(name: "cycles")
}

model Post {
  id           Int       @default(autoincrement()) @id
  creator      User      @relation(fields: [creatorId], references: [id])
  creatorId    Int       @map(name: "creator_id")
  title        String
  language     String
  contentText  String    @db.VarChar(4000) @map(name: "content_text")
  isPublic     Boolean   @map(name: "is_public")
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  localImages  LocalImage[]
  cycles       Cycle[]
  works        Work[]
  likes        User[]    @relation("PostToLikes")
  favs         User[]    @relation("PostToFavs")

  terms        Term[]    @relation("TaxonomyTermPost")

  @@index([creatorId], name: "posts_creator_id_index")

  @@map(name: "posts")
}

model Taxonomy {
  id           Int       @default(autoincrement()) @id
  creator      User?      @relation(fields: [creatorId], references: [id])
  creatorId    Int?       @map(name: "creator_id")
  label        String
  code         String    @unique
  description  String    @db.VarChar(4000) @map(name: "content_text")
  weight       Int?      @default(1)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  terms        Term[]
  
  @@index([code], name: "code_index")

  @@map(name: "taxonomies")
}

model Term {
  id           Int       @default(autoincrement()) @id
  taxonomy     Taxonomy  @relation(fields: [taxonomyId], references: [id])
  taxonomyId   Int       @map(name: "taxonomy_id")

  parentId     Int?      @map(name: "parent_id") 
  parent       Term?     @relation("TermHierarchy", fields: [parentId], references: [id])
  child        Term[]    @relation("TermHierarchy")

  creator      User?      @relation(fields: [creatorId], references: [id])
  creatorId    Int?       @map(name: "creator_id")
  
  label        String
  code         String    
  description  String    @db.VarChar(4000) @map(name: "content_text")
  weight       Int?      @default(1)

  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  works        Work[]    @relation("TaxonomyTermWork")
  cycles       Cycle[]   @relation("TaxonomyTermCycle")
  posts        Post[]    @relation("TaxonomyTermPost")

  @@index([code], name: "code_index")

  @@map(name: "terms")
}


